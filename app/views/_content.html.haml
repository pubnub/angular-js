.container
  %article
    %hr
    %section#getting_started
      .holder
      .frame
        %h2 Getting Started

        %p The HTML page includes 3 key libraries:

        %ul
          %li The core PubNub JS Library (generally from the CDN)
          %li AngularJS (usually as a Bower component)
          %li PubNub Angular (copy & paste for now - bower component coming soon!)

        %p The HTML script includes look like this:

        %pre.well
          :escaped
            <script src="http://cdn.pubnub.com/pubnub.min.js"></script>
            <script src="components/angular/angular.js"></script>
            <script src="scripts/pubnub-angular.js"></script>

        %p The app is Angular-enabled with an <code>ng-app</code> attribute:

        %pre.well
          :escaped
            <body ng-app="PubNubAngularApp">

        %p Where 'PubNubAngularApp' is the name of the Angular module containing our app.

        %p The code for the app lives in:

        %pre.well
          :escaped
            <script src="scripts/app.js"></script>

    %hr
    %section#angular_api_tour
      .holder
      .frame
        %h2 PubNub Angular API Tour
        
        %p The PubNub Angular API lives in the <code>scripts/pubnub-angular.js</code> file.

        %p Notice the dependency on the PubNub Angular library (<code>pubnub.angular.service</code>):

        %pre.well
          :escaped
            angular.module('PubNubAngularApp', ["pubnub.angular.service"])

        %p The code for the controllers lives in:

        %pre.well
          :escaped
            <script src="scripts/controllers/main.js"></script>

        %p Now, the <code>PubNub</code> service can be injected into the controller by name!

        %pre.well
          :escaped
            .controller('JoinCtrl', function($scope, PubNub) { ... });

        %h4 Using the Special AngularJS PubNub API

        %p Publishing to channels is trivial - just use the <code>PubNub.ngPublish()</code> method.

        %pre.well
          :escaped
            $scope.publish = function() {
              PubNub.ngPublish({
                channel: $scope.selectedChannel,
                message: $scope.newMessage
              });
            };

        %p
          As you can see, we call the PubNub publish method passing in the desired
          channel and message to transmit. It is also possible to transmit structured
          data as JSON objects, so go wild!
          
        %p
          It's not necessary to subscribe to a channel in order to publish to a channel.

        %p
          Subscribing to channels is accomplished by calling the <code>PubNub.ngSubscribe()</code>
          method. After the channel is subscribed, the app can register root scope message events
          by calling <code>$rootScope.$on</code> with the event string returned by
          <code>PubNub.ngMsgEv(channel)</code>.

        %pre.well
          :escaped
            $scope.subscribe = function() {
              ...
              PubNub.ngSubscribe({ channel: theChannel })
              ...
              $rootScope.$on(PubNub.ngMsgEv(theChannel), function(event, payload) {
                // payload contains message, channel, env...
                console.log('got a message event:', payload);    
              })

        %p
          This is the core of the PubNub API - allowing clients to subscribe and
          publish to channels, and have those events propagate in real-time to other
          applications connected to the same channels.


        %h4 Integrating Presence Events

        %p
          It's also easy to integrate presence events using the Angular API. In
          the example above, we just add an additional couple lines of code to
          call the <code>PubNub.ngHereNow()</code> method (retrieve current users), and register
          for presence events by calling <code>$rootScope.$on</code> with the event string
          returned by <code>PubNub.ngPrsEv(channel)</code>.

        %pre.well
          :escaped
            $scope.subscribe = function() {
              ...
              PubNub.ngSubscribe({ channel: theChannel })
              $rootScope.$on(PubNub.ngMsgEv(theChannel), function(event, payload) { ... })
              ...
              $rootScope.$on(PubNub.ngPrsEv(theChannel), function(event, payload) {
                // payload contains message, channel, env...
                console.log('got a presence event:', payload);
              })

              PubNub.ngHereNow ({ channel: theChannel })

        %p
          Using the presence event as a trigger, we retrieve the Presence
          list for a channel using the <code>PubNub.ngListPresence(channel)</code>
          function.

        %pre.well
          :escaped
            $rootScope.$on(PubNub.ngPrsEv(theChannel), function(event, payload) {
              $scope.users = PubNub.ngListPresence(theChannel);
            })

        %p
          It's also possible to retrieve the extended Presence state data
          for a channel using the <code>PubNub.ngPresenceData(channel)</code>
          function.

        %pre.well
          :escaped
            $rootScope.$on(PubNub.ngPrsEv(theChannel), function(event, payload) {
              $scope.userData = PubNub.ngPresenceData(theChannel);
            })

        %h4 Retrieving History

        %p
          It can be super-handy to gather the previous several hundred messages
          from the PubNub channel history. The PubNub Angular API makes this easy
          by bridging the event model of the PubNub JS history API and the AngularJS
          event broadcast model so that historical messages come through the same
          event interface.

        %pre.well
          :escaped
            PubNub.ngHistory({channel:theChannel, count:500});
            // messages will be broadcast via $rootScope...


        %h4 Listing & Unsubscribing from Channels

        %p
          The PubNub Angular API takes care of keeping track of currently subscribed
          channels. Call the <code>PubNub.ngListChannels()</code> method to return a
          list of presently subscribed channels.

        %pre.well
          :escaped
            $scope.channels = PubNub.ngListChannels()

        %p
          Unsubscribing is as easy as calling the <code>PubNub.ngUnsubscribe()</code>
          method. The library even takes care of removing the Angular event handlers
          for you to prevent unsightly memory leaks!

        %pre.well
          :escaped
            PubNub.ngUnsubscribe({channel:theChannel})

        %h4 Restricting Access (Advanced)

        %p
          Often times, it's desirable to lock down applications and channels.
          With PAM (PubNub Access Manager), it's easy. There are 2 calls:
          <code>grant</code> which grants access for users having a specified
          auth key, and <code>audit</code> which returns the current policy
          configuration.

        %p
          Note: to perform access control operations, the PubNub client must
          be initialized with the secret key (which should always be protected
          by server-only access).

        %pre.well
          :escaped
            PubNub.ngGrant({channel:theChannel,auth_key:'readers_must_have_this_secret',read:true,write:false,callback:function(){...}});
            # now clients providing the auth key can read...

            PubNub.ngAudit({channel:theChannel,auth_key:'readers_must_have_this_secret',callback:function(policy){...}});
            # calls back with the policy description as a JSON object...

        %p
          If this is interesting to you, see http://www.pubnub.com/docs/javascript/overview/security.html
          for more details!

      %hr
      %section#angular_api_reference
        %h2 PubNub Angular API Reference

        %h4 Core Angular API Methods

        %ul
          %li <code>PubNub.init({publish_key:'your_key',subscribe_key:'your_key',uuid:'an_optional_user_uuid'})</code>: initialize the PubNub Angular API with the specified values
          %li <code>PubNub.ngSubscribe({channel:aChannel,message:aCallback,presence:anotherCallback})</code>: subscribe to the specified channel; the provided callbacks (if any) will be invoked by wrapper functions that also maintain the Angular data structures for channels list and presence
          %li <code>PubNub.ngUnsubscribe({channel:aChannel})</code>: unsubscribe from the specified channel including any message/presence events
          %li <code>PubNub.ngPublish({channel:aChannel,message:aMessage})</code>: publish a message to the specified channel
          %li <code>PubNub.ngHistory({channel:aChannel})</code>: calls PUBNUB.history with the specified channel to produce root scope message broadcast events (make sure the code is subscribed to the channel and channel message events)
          %li <code>PubNub.ngHereNow({channel:aChannel})</code>: calls PUBNUB.here_now with the specified channel to produce root scope presence broadcast events (make sure the code is subscribed to the channel and channel presence events)
          %li <code>PubNub.ngWhereNow()</code>: returns user/channel subscription data
          %li <code>PubNub.ngAuth()</code>: updates the auth_key associated with the PubNub session
          %li <code>PubNub.ngAudit()</code>: displays PAM (PubNub Access Manager) settings, see http://www.pubnub.com/docs/javascript/api/reference.html#access
          %li <code>PubNub.ngGrant()</code>: grants acccess via PAM (PubNub Access Manager), see http://www.pubnub.com/docs/javascript/api/reference.html#grant
          %li <code>PubNub.ngRevoke()</code>: revokes acccess via PAM (PubNub Access Manager), see http://www.pubnub.com/docs/javascript/api/reference.html#grant
          %li <code>PubNub.ngListPresence(channel)</code>: returns the list of subscribers for a channel
          %li <code>PubNub.ngPresenceData(channel)</code>: returns the map of uuid to extended state data for a channel
          %li <code>PubNub.ngListChannels()</code>: returns the list of channels that the PubNub Angular API is connected to
          %li <code>PubNub.ngListPresence(channel)</code>: returns the list of subscribers for a channel
          %li <code>PubNub.ngState({channel:channel})</code>: retrieves extended user state for a channel
          %li <code>PubNub.ngState({channel:channel,state:newState})</code>: updates extended user state for a channel
          %li <code>PubNub.ngMsgEv(channel)</code>: returns the root scope broadcast event name for message events for a given channel
          %li <code>PubNub.ngPrsEv(channel)</code>: returns the root scope broadcast event name for presence events for a given channel


        %h4 Using the PubNub JS API directly (advanced)

        %p
          In unusual cases where you need to access the PubNub API directly, we make it
          easy by exposing the PUBNUB methods via the <code>PubNub.jsapi.*</code>. So if
          you really need to call <code>PUBNUB.each()</code>, you can do it by calling
          <code>PubNub.jsapi.each()</code>.

        %p For example:

        %ul
          %li <code>PubNub.jsapi.publish</code>
          %li <code>PubNub.jsapi.subscribe</code>
          %li <code>PubNub.jsapi.unsubscribe</code>
          %li <code>PubNub.jsapi.here_now</code>
          %li <code>PubNub.jsapi.history</code>

        %p
          %span.label.label-info NOTE
          These methods do not call the internal AngularJS bookkeeping methods
          to make sure the channel lists and rootScope broadcast events
          get propagated - make sure you know what you're doing!

        %p
          And... Stay tuned! We're adding support for more PubNub APIs all the
          time.
